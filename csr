#!/bin/bash

#
# Author: Daniel A. Avelino <daavelino@gmail.com>
# License: Creative Commons ShareAlike 4.0
# Publication: Jul-2017
# Rev. 0.2: Nov-2017
#

#
# Please, check for ./conf/ssl-default.cnf for default values.
#


checkInput() {
  #### Checking input structure:
  if [[ ! $1 ]]; then
    echo -e "\nUsage $0 [-w] <fqdn>\nwhere -w (optional) means a wildcard cert for a <fqdn> domain.\n"
    exit 1
  fi

  if [[ $1 == "-w" ]];then
    if [[ ! $2 ]]; then
      echo -e "Please provide the address of the domain, e.g.\n$0 -w domain.com.br\n"
      exit 1
    fi

    WILDCARD=true
    fqdn=$2

  else ### There is not '-w' argument.
    fqdn=$1
  fi

  HOMEDIR=$(pwd)
  CADIR=$HOMEDIR/CA
}

getMultiSan() {
  #### Prompts for other multi SAN entries:
  (>&2 echo -e "\n\nWould you like to add other(s) FQDN (MultiSAN) to this request? [Y/n]")
  while read -s -n1 answer; do
    if [[ $answer == [Nn] ]]; then
        return 1
    elif [[ $answer == [Yy] ]]; then
      (>&2 echo -e "\nPlease type all the desired FQDN separed by space:\n")
      read -a multisan
      break
    else
      ### The stdin is busy this case.
      (>&2 echo -e "\n\nPlease type y or n:\n")
    fi
  done

  (>&2 echo -e "Issuing also the following additional (MultiSAN) FQDN:\n\n")
  for i in ${multisan[*]}; do
    (>&2 echo -e "    $i")
  done
  (>&2 echo -e "\n\nAre you sure? [Y/n]\n\n")

  while read -s -n1 answer; do
    if [[ $answer == [Yy] ]]; then
      break
    elif [[ $answer == [Nn] ]]; then
      #### start the process again:
      getMultiSan
    else
      ### The stdin is busy this case.
      (>&2 echo -e "\n\nPlease type y or n:\n")
    fi  
  done 

  echo ${multisan[*]}
}


createStructure() {
  #### Creating directory structure:
  if [[ -d $HOMEDIR/certs/$fqdn ]]; then
    echo "Directory $HOMEDIR/certs/$fqdn exists and can contain important files. Please verify. Exiting."
    exit -1
  fi
  
  mkdir -p $CADIR/certs/$fqdn
  cd $CADIR/certs/$fqdn
}

createTmpConfigFile() {
  #### Creates a temporary openssl.cnf file to insert subjectAltNames correctly. If openssl.cnf cannot be found, it uses the machine default:
  if [[ -f $HOMEDIR/conf/ssl-default.cnf ]]; then
    cp $HOMEDIR/conf/ssl-default.cnf $HOMEDIR/certs/$fqdn/openssl.cnf
  else
    cp /etc/ssl/openssl.cnf $CADIR/certs/$fqdn/openssl.cnf
  fi

  echo "[alt_names]" >> $CADIR/certs/$fqdn/openssl.cnf
  
  if [[ $WILDCARD == true ]]; then
    echo "DNS.1 = *.$fqdn" >> $CADIR/certs/$fqdn/openssl.cnf
  else
    echo "DNS.1 = $fqdn" >> $CADIR/certs/$fqdn/openssl.cnf
  fi


  #### Adding MultiSan to CSR
  tmp=$( getMultiSan )

  if [[ $tmp ]]; then
    counter=2
    for i in ${tmp[*]}; do
      echo "DNS.$counter = $i" >> $CADIR/certs/$fqdn/openssl.cnf
      counter=$(( $counter + 1 ))
    done
  fi
}

generateCSR() {
  #### RSA key pair:
  openssl genrsa \
          -out $CADIR/certs/$fqdn/$fqdn.key 4096
  
  #### Certificate Sign Request (CSR):
  openssl req \
          -sha256 \
          -new \
          -config $CADIR/certs/$fqdn/openssl.cnf \
          -key $CADIR/certs/$fqdn/$fqdn.key \
          -out $CADIR/certs/$fqdn/$fqdn.csr
}

createVerify() {
  #### Creates verification tool for csr and keys:
  CHECKFILE=$CADIR/certs/$fqdn/checkCSR
  echo -e "#!/bin/bash\n\n" >> $CHECKFILE
  echo -e "openssl req -noout -text -in $CADIR/certs/$fqdn/$fqdn.csr | less\nexit 0" >> $CHECKFILE

  chmod +x $CHECKFILE

  CHECKFILE=$CADIR/certs/$fqdn/checkKey
  echo -e "#!/bin/bash\n\n" >> $CHECKFILE
  echo -e "openssl rsa -noout -text -in $CADIR/certs/$fqdn/$fqdn.key | less\nexit 0" >> $CHECKFILE

  chmod +x $CHECKFILE
}

main() {
  checkInput $1 $2 $3
  createStructure 
  createTmpConfigFile
  generateCSR
  createVerify
  exit 0
}

####
main $1 $2 $3
